
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%  Plancha N° 1 -- Sistemas Operativos II   %
%                                           %
%    Integrantes: Julio Güella              %
%                 Luis Dzikiewicz           %
%                 Iván Ernandorena          %
%                                           %
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%

Carpeta principal: nachos/code/threads

1.- La máquina virtual simulada para Nachos tiene MEMORY_SIZE = NUM_PHYS_PAGES * PAGE_SIZE.
 NUM_PHYS_PAGES vale 32 y PAGE_SIZE vale 128, por lo tanto tiene 4096 bytes de memoria.

2.- Para modificar este valor deberíamos modificar el tamaño del sector del disco (la variable SECTOR_SIZE
ubicada en el archivo disk.hh) y no NUM_PHYS_PAGES
porque estaría modificando la arquitectura (machine.hh).

3.- El tamaño de un disco está dado por la cantidad de tracks y sectores que tiene, en este caso tiene 32
tracks y 32 sectores de 128 bytes. Por lo tanto
el tamaño del disco será de 131072 bytes.

4.- La definición de las instrucciones se encuentran en "encoding.hh". Cada una comienza con el código "OP" 
pero la instrucciçon "OP_RES" es un código reservado 
y no una instrucción en sí. "OP_UNIMP" es una instrucción legal que todavía no se ha implementado. Por lo
tanto, son 59 las instrucciones MIPS simuladas por Nachos.

5.- La operación ADD (definida en /machine/mips_sim.cc) primero suma los registros rs y rt. Luego chequea si
los sumandos tienen distinto signo o si los sumandos 
tienen igual signo pero el resultado 'sum' tiene un signo distinto, en esos casos lanza la excepción 
"OVERFLOW_EXCEPTION".
Si no hay excepción guarda el resultado de la suma en el registro rd.

6.- Las funciones y métodos llamadas por el archivo main de Nachos al ejecutarlo en el directorio threads (en
un primer nivel de profundidad) son: 

Initialize, definida en el archivo: "/threads/system.cc"

	Esta función, ya en un segundo nivel de profundidad, llama a las siguientes funciónes y métodos:
		
		RandomInit : definida en /machine/system_dep.cc
		DebugInit  : definida en utility.hh

		new Statistics : definida en statistics.cc
		new Interrupt  : definida en interrupt.cc
		new Scheduler  : definida en scheduler.cc
		new Timer      : definida en timer.cc
 		
    		new Thread("main") : definida en thread.cc
    		currentThread->setStatus(RUNNING); definida en el archivo thread.hh

    		CallOnUserAbort : definida en /machine/system_dep.cc
		Cleanup: definida en el archivo: "system.cc".

PrintVersion, definida en el archivo: "main.cc" (y utiliza valores de copyright.h).

ThreadTest, definida en el archivo: "thread_test.cc"

	Esta función, ya en un segundo nivel de profundidad, llama a las siguientes funciónes y métodos:
		
		new Thread(name) : definida en thread.cc
    		newThread->Fork(SimpleThread, (void *) name) : definida en "thread.cc"
    		SimpleThread : definida en el archivo: "thread_test.cc"

7.- Se prefiere emular una CPU antes de usar directamente la CPU existente ya que, dado que Nachos esta orientado a ser un proyecto educativo para que estudiantes
 puedan modificar y comprender como funciona un sistema operativo real, será posible depurar el sistema con facilidad y ejecutar tareas con mayor rapidez.
Además, al emular el CPU, se dejan de lado detalles dependiendo el hardware que tenga el equipo donde se intente correr el sistema.

8.- Archivo: /threads/utility.hh

Las banderas de depuración se activan con -d en los comandos pasados a Nachos. Las banderas existentes son:
`+` -- turn on all debug messages.
`t` -- thread system.
`s` -- semaphores, locks, and conditions.
`i` -- interrupt emulation.
`m` -- machine emulation (requires *USER_PROGRAM*).
`d` -- disk emulation (requires *FILESYS*).
`f` -- file system (requires *FILESYS*).
`a` -- address spaces (requires *USER_PROGRAM*).
`n` -- network emulation (requires *NETWORK*).

9.- Archivos: /threads/utility.hh ; /threads/utility.cc
La macro DEBUG se encarga de imprimir en pantalla mensajes (ya creados) durante el tiempo de ejecución, 
principalmente con el objetivo de ayudar a la corrección de código. Esto ocurrirá solo si está activada la
bandera correspondiente compilando con "-d +".

La macro ASSERT toma como argumento una condición, y cada vez que esa condición no se cumpla durante el tiempo de ejecución
se encargará de imprimir en pantalla un mensaje con información sobre en que línea ocurrió esto.

10.- Estas constantes permiten decidir que módulos incluir durante la compilacion dependiendo de la carpeta donde se compile el proyecto.
Dichas constantes se encuentran definidas en:
  USER_PROGRAM: 
    filesys/Makefile
    network/Makefile
    userprog/Makefile
    vmem/Makefile
  FILESYS_NEEDED:
    filesys/Makefile
    network/Makefile
    userprog/Makefile
    vmem/Makefile
  FILESYS_STUB:
    userprog/Makefile
    vmem/Makefile
  NETWORK:
    network/Makefile

11.- Archivos: /threads/list.hh ; /threads/synch_list.hh

Las synch_list hacen uso de las list comunes. La principal diferencia es que las synch_list utilizan locks para que solo un hilo pueda acceder a
ellas al mismo tiempo, además, hilos tratando de sacar un elemento de una synch_list esperan hasta que esta lista tenga un elemento.
synch_list utiliza list en su interior.

12.- Archivos: /threads/main.cc

La función main está definida en el archivo "main.cc". La función main del ejecutable nachos de la carpeta userprog está definida también en /threads/main.cc 
y se ejecuta dependiendo desde donde se esté ejecutando (ocurrirá esto si la constante USERPROG está definida en el make de dicho directorio).


13.- Nachos soporta la siguiente línea de comandos:
       nachos -d -rs 
              -s -x -c   
              -f -cp  
              -p  -r  -l -D -t
              -n  -m 
              -o 
              -z

USER_PROGRAM
   -s causes user programs to be executed in single-step mode
   -x ejecuta un programa pasado por el usuario
   -c prueba la consola

 FILESYS 
   -f formatea el disco fisico
   -cp copia un archivo de UNIX a Nachos
   -p imprime el contenido de un archivo de Nachos por salida estandar
   -r elimina un archivo de Nachos del file system
   -l ls en Nachos
   -D imprime el contenido del file system 
   -t testea el file system

 NETWORK 
   -n setea la robustes de la red
   -m setea el id de la maquina como host
   -o corre una prueba sencilla del software de red de Nachos

  La opción -rs permite que durante la ejecución de un thread este pueda realizar un yield en cualquier momento. Además, puede repetirse.

  -z imprime el copyright de Nachos

14.-

#include <stdio.h>

void
ThreadTest()
{
    DEBUG('t', "Entering SimpleTest");

    int i = 1;

    for(i; i < 5; i++){
        char *name = new char[64];
        sprintf(name, "%d thread",i+1);
        // strncpy(name, "2nd", 64);
        Thread *newThread = new Thread(name);
        newThread->Fork(SimpleThread, (void *) name);
    }
    SimpleThread((void *) "1 thread");
}

15 y 16.- 

#ifdef SEMAPHORE_TEST
  #include "synch.hh"
  Semaphore* sem = new Semaphore("test",3);
#endif

void
SimpleThread(void *name_)
{

    char *name = (char *) name_;

    for (unsigned num = 0; num < 10; num++) {
      #ifdef SEMAPHORE_TEST
        sem->P(); //take the sem
        DEBUG('s',"*** Thread `%s` has done P\n", name);
      #endif

        //IntStatus oldLevel = interrupt->SetLevel(IntOff);
        printf("*** Thread `%s` is running: iteration %d\n", name, num);
        //interrupt->SetLevel(oldLevel);
      
      #ifdef SEMAPHORE_TEST
        sem->V(); // release the sem
        DEBUG('s',"*** Thread `%s` has done V\n", name);
      #endif    

      currentThread->Yield();
    }
    
    //IntStatus oldLevel = interrupt->SetLevel(IntOff);
    printf("!!! Thread `%s` has finished\n", name);
    //interrupt->SetLevel(oldLevel);
}








